#!/bin/sh
set -eu

## Program Tracking

program_command="venn"
program_version="4.3.0"
program_created="2017-01-30"
program_updated="2018-05-30"
program_license="GPL"
program_contact="Joel Parker Henderson (joel@joelparkerhenderson.com)"

## Help Function

help(){
cat << EOF

venn: set operations with a command line shell script


### Syntax

Syntax:

    venn (union|intersection|...) <input> ...

Syntax exxample:

    venn union file-1.txt file-2.txt


### Set operations

Set operations that venn can process:

  * union: A ∪ B (lines that are in any input stream)

  * intersection: A ∩ B (lines that are in every input stream)

  * difference: A ⊕ B (lines that are in exactly one input stream)

  * except: A - B (lines that are solely in the first input steam)

  * extra: B - A (lines that are solely in the last input stream)

  * joint: is any line in more than one input stream?

  * disjoint: is each line in exactly one input stream?


### Options

Options on the command line:

  * `-h` `--help`: show help

  * `-v` `--version`: show version


Repository:

  * https://github.com/SixArm/venn


## Examples

Examples use these two example data files:

    $ cat a
    red
    green

    $ cat b
    red
    blue

Union:

    $ venn union a b
    red
    green
    blue

Intersection:

    $ venn intersection a b
    red

Difference:

    $ venn difference a b
    green
    blue

Except:

    $ venn except a b
    green

Extra:

    $ venn extra a b
    blue

Joint:

    $ venn disjoint a b
    true

Disjoint:

    $ venn disjoint a b
    false


## Tracking

  * Command: $program_command
  * Version: $program_version
  * Updated: $program_updated
  * License: $program_license
  * Contact: $program_contact

EOF
}

if [ "$#" -eq 0 ]; then
  help; exit 0
fi

if [ "$#" -eq 1 ]; then
  case "$1" in
    -h|--help)
      help; exit 0
      ;;
    -v|--version)
      out $program_version; exit 0
      ;;
  esac
fi
      
operation="$1"; shift
TRUE=${TRUE:-true}
FALSE=${FALSE:-false}

case $operation in
  ∪|u|union|or|∨|add|addition|'+'|'|')
    awk 'seen[$0] { next } { print $0; seen[$0]=1 }' "$@"
    ;;
  ∩|i|intersection|and|∧|'&')
    awk 'FNR==1{argind+=1} seen[$0]+=1 {next} END { for (key in seen) { if (seen[key]==argind) { print key } } }' "$@"
    ;;
  ⊕|d|diff|difference|xor|⊻)
    awk 'FNR==1{argind+=1} seen[$0]+=1 {next} END { for (key in seen) { if (seen[key]==1) { print key } } }' "$@"
    ;;
  except|first|subtract|subtraction|'-')
    awk 'NR==FNR{seen[$0]=1;next} seen[$0]=0; END { for (key in seen) { if (seen[key]) { print key } } }' "$@"
    ;;
  extra|last)
    awk 'BEGIN{argindmax=ARGC-1} FNR==1{argind+=1} argind<argindmax {seen[$0]; next}!($0 in seen)' "$@"
    ;;
  joint|codependent)
    awk -v t="$TRUE" -v f="$FALSE" 'seen[$0]==1 {x=1;exit} {seen[$0]=1} END { print x ? t : f; exit !x }' "$@"
    ;;
  disjoint|independent)
    awk -v t="$TRUE" -v f="$FALSE" 'seen[$0]==1 {x=1;exit} {seen[$0]=1} END { print x ? f : t; exit !!x }' "$@"
    ;;
  *)
esac

